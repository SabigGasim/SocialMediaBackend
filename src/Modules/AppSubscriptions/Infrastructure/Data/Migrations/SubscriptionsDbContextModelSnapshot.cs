// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Data;

#nullable disable

namespace SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SubscriptionsDbContext))]
    partial class SubscriptionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app_subscriptions")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SocialMediaBackend.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EnqueueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("IdempotencyKey")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.AreNullsDistinct(b.HasIndex("IdempotencyKey"), true);

                    b.ToTable("InternalCommands", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.BuildingBlocks.Infrastructure.Messaging.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Processed");

                    b.ToTable("InboxMessages", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.BuildingBlocks.Infrastructure.Messaging.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Processed");

                    b.ToTable("OutboxMessages", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Domain.AppPlan.AppSubscriptionProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasColumnName("Tier");

                    b.HasKey("Id");

                    b.ToTable("AppSubscriptionProducts", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Domain.Authorization.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", "app_subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Permissions.AppPlan.Subscribe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Permissions.AppPlan.Unsubscribe"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Permissions.AppPlan.CreatePlan"
                        },
                        new
                        {
                            Id = 0,
                            Name = "Permissions.AppPlan.CreateProduct"
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Domain.Authorization.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "app_subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "UserRole"
                        },
                        new
                        {
                            Id = 1,
                            Name = "AdminUserRole"
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "app_subscriptions");

                    b.HasData(
                        new
                        {
                            RoleId = 0,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Domain.Roles.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "app_subscriptions");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Domain.AppPlan.AppSubscriptionProduct", b =>
                {
                    b.OwnsMany("SocialMediaBackend.Modules.AppSubscriptions.Domain.AppPlan.AppSubscriptionPlan", "Plans", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("AppSubscriptionPlan", "app_subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("SocialMediaBackend.Modules.Payments.Contracts.ProductPrice", "Price", b2 =>
                                {
                                    b2.Property<Guid>("AppSubscriptionPlanId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("PaymentInterval")
                                        .HasColumnType("integer")
                                        .HasColumnName("PaymentInterval");

                                    b2.HasKey("AppSubscriptionPlanId");

                                    b2.ToTable("AppSubscriptionPlan", "app_subscriptions");

                                    b2.WithOwner()
                                        .HasForeignKey("AppSubscriptionPlanId");

                                    b2.OwnsOne("SocialMediaBackend.Modules.Payments.Contracts.MoneyValue", "MoneyValue", b3 =>
                                        {
                                            b3.Property<Guid>("ProductPriceAppSubscriptionPlanId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Amount")
                                                .HasColumnType("integer")
                                                .HasColumnName("PriceAmount");

                                            b3.Property<int>("Currency")
                                                .HasColumnType("integer")
                                                .HasColumnName("PriceCurrency");

                                            b3.HasKey("ProductPriceAppSubscriptionPlanId");

                                            b3.ToTable("AppSubscriptionPlan", "app_subscriptions");

                                            b3.WithOwner()
                                                .HasForeignKey("ProductPriceAppSubscriptionPlanId");
                                        });

                                    b2.Navigation("MoneyValue")
                                        .IsRequired();
                                });

                            b1.Navigation("Price")
                                .IsRequired();
                        });

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.AppSubscriptions.Domain.Authorization.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.AppSubscriptions.Domain.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.AppSubscriptions.Infrastructure.Domain.Roles.UserRole", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.AppSubscriptions.Domain.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.AppSubscriptions.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
