// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialMediaBackend.Modules.Chat.Infrastructure.Data;

#nullable disable

namespace SocialMediaBackend.Modules.Chat.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20250522194155_GroupChatMembersAndModeratorsMigration")]
    partial class GroupChatMembersAndModeratorsMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("chat")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupMessage_SeenBy", b =>
                {
                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatterId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupMessageId", "ChatterId");

                    b.HasIndex("ChatterId");

                    b.ToTable("GroupMessage_SeenBy", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.BuildingBlocks.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EnqueueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("InternalCommands", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("integer");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProfileIsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Chatters", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.DirectChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("FirstChatterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("SecondChatterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstChatterId");

                    b.HasIndex("Id");

                    b.HasIndex("SecondChatterId");

                    b.ToTable("DirectChats", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.UserDirectChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DirectChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatterId");

                    b.HasIndex("DirectChatId");

                    b.HasIndex("Id");

                    b.ToTable("UserDirectChats", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GroupChats", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChatMember", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupChatId", "MemberId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupChatMembers", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChatModerator", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupChatId", "ModeratorId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("ModeratorId");

                    b.ToTable("GroupChatModerators", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.UserGroupChat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatterId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("Id");

                    b.ToTable("UserGroupChats", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Follows.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("FollowedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FollowedAt");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("Id");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follows", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.DirectMessages.DirectMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("DirectMessages", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.DirectMessages.UserDirectMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserDirectChatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DirectMessageId");

                    b.HasIndex("Id");

                    b.HasIndex("UserDirectChatId");

                    b.ToTable("UserDirectMessages", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.GroupMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("GroupMessages", "chat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.UserGroupMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserGroupChatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId");

                    b.HasIndex("Id");

                    b.HasIndex("UserGroupChatId");

                    b.ToTable("UserGroupMessages", "chat");
                });

            modelBuilder.Entity("GroupMessage_SeenBy", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", null)
                        .WithMany()
                        .HasForeignKey("ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.GroupMessage", null)
                        .WithMany()
                        .HasForeignKey("GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", b =>
                {
                    b.OwnsOne("SocialMediaBackend.BuildingBlocks.Domain.ValueObjects.Media", "ProfilePicture", b1 =>
                        {
                            b1.Property<Guid>("ChatterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FilePath")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProfilePictureFilePath");

                            b1.Property<int>("MediaType")
                                .HasColumnType("integer")
                                .HasColumnName("ProfilePictureMediaType");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProfilePictureUrl");

                            b1.HasKey("ChatterId");

                            b1.ToTable("Chatters", "chat");

                            b1.WithOwner()
                                .HasForeignKey("ChatterId");
                        });

                    b.Navigation("ProfilePicture")
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.DirectChat", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "FirstChatter")
                        .WithMany()
                        .HasForeignKey("FirstChatterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "SecondChatter")
                        .WithMany()
                        .HasForeignKey("SecondChatterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstChatter");

                    b.Navigation("SecondChatter");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.UserDirectChat", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Chatter")
                        .WithMany()
                        .HasForeignKey("ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.DirectChat", "DirectChat")
                        .WithMany()
                        .HasForeignKey("DirectChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatter");

                    b.Navigation("DirectChat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChatMember", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", "GroupChat")
                        .WithMany("Members")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChatModerator", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", "GroupChat")
                        .WithMany("Moderators")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.UserGroupChat", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Chatter")
                        .WithMany()
                        .HasForeignKey("ChatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", "GroupChat")
                        .WithMany()
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatter");

                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Follows.Follow", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.DirectMessages.DirectMessage", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.DirectChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.DirectMessages.UserDirectMessage", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Messages.DirectMessages.DirectMessage", "DirectMessage")
                        .WithMany()
                        .HasForeignKey("DirectMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.UserDirectChat", "UserDirectChat")
                        .WithMany("Messages")
                        .HasForeignKey("UserDirectChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");

                    b.Navigation("UserDirectChat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.GroupMessage", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.UserGroupMessage", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Messages.GroupMessages.GroupMessage", "GroupMessage")
                        .WithMany()
                        .HasForeignKey("GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.UserGroupChat", "UserGroupChat")
                        .WithMany("Messages")
                        .HasForeignKey("UserGroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMessage");

                    b.Navigation("UserGroupChat");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Chatters.Chatter", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.DirectChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.DirectChats.UserDirectChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.GroupChat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Moderators");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Chat.Domain.Conversations.GroupChats.UserGroupChat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
