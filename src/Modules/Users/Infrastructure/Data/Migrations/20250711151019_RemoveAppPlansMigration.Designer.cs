// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialMediaBackend.Modules.Users.Infrastructure.Data;

#nullable disable

namespace SocialMediaBackend.Modules.Users.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250711151019_RemoveAppPlansMigration")]
    partial class RemoveAppPlansMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SocialMediaBackend.BuildingBlocks.Infrastructure.Messaging.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Processed");

                    b.ToTable("OutboxMessages", "users");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Authorization.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", "users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Permissions.Users.Get"
                        },
                        new
                        {
                            Id = 0,
                            Name = "Permissions.Users.GetFullDetails"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Permissions.Users.DeleteSelf"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Permissions.Users.ModifyInfo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Permissions.Users.Follow"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Permissions.Users.AcceptFollowRequests"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Permissions.Users.RejectFollowRequests"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Permissions.Users.Unfollow"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Permissions.AppPlan.Subscribe"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Permissions.AppPlan.Unsubscribe"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Permissions.AppPlan.CreatePlan"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Permissions.AppPlan.CreateProduct"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Permissions.Users.Delete"
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Authorization.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "users");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "UserRole"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AppBasicPlanRole"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AppPlusPlanRole"
                        },
                        new
                        {
                            Id = 1,
                            Name = "AdminUserRole"
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Users.Follows.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("Id");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follows", "users");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("integer");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProfileIsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "users");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Infrastructure.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "users");

                    b.HasData(
                        new
                        {
                            RoleId = 0,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 0
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 0,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 0
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        });
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Infrastructure.Domain.Roles.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "users");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Users.Follows.Follow", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Users.User", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Users.User", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Users.User", b =>
                {
                    b.OwnsOne("SocialMediaBackend.BuildingBlocks.Domain.ValueObjects.Media", "ProfilePicture", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FilePath")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProfilePictureFilePath");

                            b1.Property<int>("MediaType")
                                .HasColumnType("integer")
                                .HasColumnName("ProfilePictureMediaType");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProfilePictureUrl");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ProfilePicture")
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Infrastructure.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Authorization.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Infrastructure.Domain.Roles.UserRole", b =>
                {
                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaBackend.Modules.Users.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMediaBackend.Modules.Users.Domain.Users.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");
                });
#pragma warning restore 612, 618
        }
    }
}
